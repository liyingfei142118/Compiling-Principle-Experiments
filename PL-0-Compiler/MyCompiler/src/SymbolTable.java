//SymTable符号表，每一列的具体含义见Table

public class SymbolTable {
    private int row_Max=10000;           //最大表长
    //private int value_Max=100000;        //最大常量或变量值
    //private int level_Max=3;                 //最深嵌套层次
    //private int address_Max=10000;       //最大地址数

    private int myconst=1;                  //常量类型用1表示
    private int var=2;                      //变量类型用2表示
    private int proc=3;             //过程类型用3表示

    //Table是符号表中的每一行
    //tablePtr指向符号表中已经填入值最后一项的下一项
    //length表示符号表中填入了多少行数据，实际上可以用tablePtr来表示
    private Table[] table=new Table[row_Max];          //rowMax行


    private int tablePtr=0;
    private int length=0;


    public void setTablePtr(int tablePtr) {
        this.tablePtr = tablePtr;
    }
    //初始化，全部为0
    public SymbolTable(){
        for(int i=0;i<row_Max;i++){
            table[i]=new Table();
            table[i].setAddress(0);
            table[i].setLevel(0);
            table[i].setSize(0);
            table[i].setType(0);
            table[i].setValue(0);
            table[i].setName(null);
        }
    }

    public int getVar() {
        return var;
    }

    public int getMyconst() {
        return myconst;
    }

    public int getProc() {
        return proc;
    }

    public int getLength(){
        return length;
    }

    //获取符号表中第i行
    public Table getRow(int i){
        return table[i];
    }
    /*
      *登录常量进符号表
      * 参数：
      * name：常量名
      * level：所在层次
      * value：值
      * address：相对于所在层次基地址的地址
    */
    public void enterConst(String name,int level,int value,int address){
        table[tablePtr].setName(name);
        table[tablePtr].setLevel(level);
        table[tablePtr].setValue(value);
        table[tablePtr].setAddress(address);
        table[tablePtr].setType(myconst);
        table[tablePtr].setSize(4);
        tablePtr++;
        length++;
    }



    /*
     *    登录变量进符号表
     *  参数同上
     *  说明：由于登录符号表操作都是在变量声明或常量声明或过程声明中调用，而PL/0不支持变量声明时赋值，所以不传入参数value
    */
    public void enterVar(String name,int level,int address){
        table[tablePtr].setName(name);
        table[tablePtr].setLevel(level);
        table[tablePtr].setAddress(address);
        table[tablePtr].setType(var);
        table[tablePtr].setSize(0);
        tablePtr++;
        length++;
    }
    //登录过程进符号表，参数同上
    public void enterProc(String name,int level,int address){
        table[tablePtr].setName(name);
        table[tablePtr].setLevel(level);
        table[tablePtr].setAddress(address);
        table[tablePtr].setType(proc);
        table[tablePtr].setSize(0);
        tablePtr++;
        length++;
    }

    //在lev层之前，包括lev层，名字为name的变量、常量、或过程是否被定义，
   
    public boolean Is_PreTable(String name,int lev){
        for(int i=0;i<length;i++){
            if(table[i].getName().equals(name)&&table[i].getLevel()<=lev){
                return true;
            }
        }
        return false;
    }   
 /* //在lev层之前名字为name的变量、常量、或过程是否被定义，
  *    public boolean Is_PreTable(String name,int lev){
        for(int i=0;i<length;i++){
            if(table[i].getName().equals(name)&&table[i].getLevel()<lev){
                return true;
            }
        }
        return false;
    }   
  */
    //在lev层的这个函数或过程块中（过程块的name： Pname用于检测）
    //lev层之前 名字为name的变量、常量、或过程是否被定义
    public boolean Is_Table(String name,int lev,String Pname){
    	int key=0;
        for(int i=0;i<length;i++){
        	if(table[i].getName()==Pname) {
        	lev--;//如果在本层这个函数没有找到 lev-- 从而不会找到其他函数或过程块
        	break;
        	}
            if(table[i].getName().equals(name)&&table[i].getLevel()==lev){
                //本层这个函数中找到
            	key=1;
            }
        }
       
        if(key==0)//如果在本层这个函数没有找到 去低层找 调用Is_PreTable（）
        if(Is_PreTable(name,lev)) {
        	key=1;//找到 key=1
        } 	 
        if(key==1) {
        	return true;
        }
        else
        {
        	return false;
        }
    }
    //在lev层，名字为name的变量、常量、或过程是否被定义，
    //定义变量、常量、或过程时调用该函数
    public boolean Is_NowTable(String name,int lev){
        for(int i=0;i<length;i++){
            if(table[i].getName().equals(name)&&table[i].getLevel()==lev){
                return true;
            }
        }
        return false;
    }


    //返回符号表中名字为name的行的行号
    public int  getNameRow(String name){
        for(int i=length-1;i>=0;i--){
            if(table[i].getName().equals(name)){
                return i;
            }
        }
        return -1;          //返回-1表示不存在该名字
    }
    public int getTablePtr() {
        return tablePtr;
    }

    public Table[] getAllTable(){
        return table;
    }

    //查找本层的过程在符号表中的位置
    public int getLevelPorc(int level){
        for(int i=length-1;i>=0;i--){
            if(table[i].getType()==proc){
                return i;
            }
        }
        return -1;
    }

}
